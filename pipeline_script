pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = "devopsadmin786"
        DOCKER_IMAGE_NAME = "mynodeapp"
        DOCKER_IMAGE_TAG = "latest"
        BUILD_ID = "${env.BUILD_ID}"
        DOCKER_IMAGE = ""
        DOCKER_HUB_CREDENTIALS = 'dockerhublogin'
        DEPLOYMENT_FILE = "Deployment.yaml"
        SERVICE_FILE = "service.yaml"
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'GitLogins', url: 'https://github.com/DevopsAdmin786/nodejs-docker.git'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1.${BUILD_ID}")
                    docker.image("${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1.${BUILD_ID}").tag("${DOCKER_IMAGE_TAG}")

                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', DOCKER_HUB_CREDENTIALS) {
                        docker.image("${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}").push('latest')
                        docker.image("${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}").push("v1.${BUILD_ID}")
                    }
                }
            }
        }
        
        stage ('Remove Docker Image from Jenkins Server') {
            steps {
                script {
                    sh "docker images -q | xargs docker image rm -f"
                }
            }
        }
        
        stage('Copy Deployment and service yaaml to K8S Master from Jenkin') {
            steps {
                    sshagent(['kubernetserver']) {
                        sh 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.34.233'
                        sh 'scp /var/lib/jenkins/workspace/mynodepipeline/*.yaml ec2-user@172.31.34.233:/home/ec2-user/'
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                    sshagent(['kubernetserver']) {
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.34.233 sudo kubectl apply -f /home/ec2-user/${DEPLOYMENT_FILE}"
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.34.233 sudo kubectl apply -f /home/ec2-user/${SERVICE_FILE}"
                }        
            }
        }
    }
}
